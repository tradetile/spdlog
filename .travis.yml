# Adapted from various sources, including:
# - Louis Dionne's Hana: https://github.com/ldionne/hana
# - Paul Fultz II's FIT: https://github.com/pfultz2/Fit
# - Eric Niebler's range-v3: https://github.com/ericniebler/range-v3
language: cpp

# travis test.
env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "kSgJWUVANCcfHHCd40asnT0NU00/I/4XrIBpXO7R5A8IP3h1tmmFcDFgb34nghVso3W1+iC3znFZNmhFpAn67EgdKVbeNfiSJ2sTiVRj600Kenh+XEUnjiFT0SOkj1hy9YR4qByd4eIHSDV1kYSZBlOZJ3+5SjBOF87Cl9n0knldt5PLSyU//hJ8P+lUsy/dkqaab1eWdB2/cZaOJjvsy0zl/753c0L76Axv93nZkifKJbsYAnu5NzYrgUQjU8HbGRIM+D/Vaod7hb4GdoW/JK9PNcxOe5TAudTDDT7QIV7hCKy+RdptRp6esNUGc5P3LDTptFjEXO2XiIeNUdvnGI2nvubKrquGPByTnRL1cUxQkCsa0yfLvC3mLyDsho9XUGsg5at8mQMVMC3uwMhIYKIBl+6fCr0MHtjEgr0EEbCjUvqtr3EC7UG4RIQW5bSTIDRMEtyzlKxmBe7+t+pUP37QDtXCJs1JyeVT0IwpzNxy9voXnvvU9KkthwK6UWX7EXqECbLRbOMFax25qKu599alux0OeS3Q64z0sC7gI9borgg9xTOjgHjPsbL8udpXDFlQalcUNxzorYZGR7fZ0lOxCWwzlvzSz9w3SzmsPzIS0L/cXHJDeXZmTEYRKM+tC+wYOBBBfCD05ugus6/YdAib9hfBy5AScmYYQmKwWQc="

# Test matrix:
# - Build matrix per compiler: C++11/C++14 + Debug/Release
# - Optionally: AddressSanitizer (ASAN)
# - Valgrind: all release builds are also tested with valgrind
# - clang 3.4, 3.5, 3.6, trunk
#   - Note: 3.4 and trunk are tested with/without ASAN,
#     the rest is only tested with ASAN=On.
# - gcc 4.9, 5.0
#
matrix:
  include:
   
# Test gcc-4.8: C++11, Build=Debug/Release, ASAN=Off
    - env: GCC_VERSION=4.8 BUILD_TYPE=Debug CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons: &gcc48
        apt:
          packages:
            - g++-4.8
            - valgrind
          sources:
            - ubuntu-toolchain-r-test

    - env: GCC_VERSION=4.8 BUILD_TYPE=Release CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons: *gcc48
      
    # Test gcc-4.9: C++11, Build=Debug/Release, ASAN=Off
    - env: GCC_VERSION=4.9 BUILD_TYPE=Debug CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons: &gcc49
        apt:
          packages:
            - g++-4.9
            - valgrind
          sources:
            - ubuntu-toolchain-r-test

    - env: GCC_VERSION=4.9 BUILD_TYPE=Release CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons: *gcc49

# travis test.
addons:
  coverity_scan:
    project:
      name: "tradetile/spdlog"
      description: "Build submitted via Travis CI"
    notification_email: dujung@kaist.ac.kr
    build_command_prepend: "./configure; make clean"
    build_command:   "make -j 4"
    branch_pattern: coverity_scan
    
# Install dependencies
before_install:
  - export CHECKOUT_PATH=`pwd`;
  - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
  - if [ "$CLANG_VERSION" == "3.4" ]; then export CXX="/usr/local/clang-3.4/bin/clang++" CC="/usr/local/clang-3.4/bin/clang"; fi
  - which $CXX
  - which $CC
  - which valgrind
  - if [ -n "$CLANG_VERSION" ]; then sudo CXX=$CXX CC=$CC ./tests/install_libcxx.sh; fi
  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

install:
  - cd $CHECKOUT_PATH

  # Workaround for valgrind bug: https://bugs.kde.org/show_bug.cgi?id=326469.
  # It is fixed in valgrind 3.10 so this won't be necessary if someone
  # replaces the current valgrind (3.7) with valgrind-3.10
  - sed -i 's/march=native/msse4.2/' example/Makefile

  - if [ ! -d build ]; then mkdir build; fi
  - export CXX_FLAGS="-I${CHECKOUT_PATH}/include"
  - export CXX_LINKER_FLAGS=""
  - if [ -z "$BUILD_TYPE" ]; then export BUILD_TYPE=Release; fi
  - if [ "$ASAN" == "On"]; then export CXX_FLAGS="${CXX_FLAGS} -fsanitize=address,undefined,integer -fno-omit-frame-pointer -fno-sanitize=unsigned-integer-overflow"; fi
  - if [ -n "$CLANG_VERSION" ]; then CXX_FLAGS="${CXX_FLAGS} -D__extern_always_inline=inline"; fi
  - if [ "$LIBCXX" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -stdlib=libc++ -I/usr/include/c++/v1/"; fi
  - if [ "$LIBCXX" == "On" ]; then CXX_LINKER_FLAGS="${CXX_FLAGS} -L/usr/lib/ -lc++"; fi
  - CXX_FLAGS="${CXX_FLAGS} -std=c++${CPP}"

  # Build examples
  - cd example
  - if [ "$BUILD_TYPE" == "Release" ]; then make rebuild CXXFLAGS="${CXX_FLAGS} ${CXX_LINKER_FLAGS}" VERBOSE=1; export BIN=example; fi
  - if [ "$BUILD_TYPE" == "Debug" ]; then make rebuild debug CXXFLAGS="${CXX_FLAGS} ${CXX_LINKER_FLAGS}" VERBOSE=1; export BIN=example-debug; fi
  

script:
  - ./"${BIN}"
  - valgrind --trace-children=yes --leak-check=full ./"${BIN}"
  - cd $CHECKOUT_PATH/tests; make rebuild; ./tests
  - cd $CHECKOUT_PATH/tests; STYLE=printf make rebuild; ./tests

notifications:
  email: false
